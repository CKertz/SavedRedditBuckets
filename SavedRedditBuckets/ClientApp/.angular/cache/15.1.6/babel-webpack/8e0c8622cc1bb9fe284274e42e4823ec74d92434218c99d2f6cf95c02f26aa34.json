{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./login.service\";\nimport * as i2 from \"@angular/forms\";\nexport class LoginComponent {\n  constructor(loginService) {\n    this.loginService = loginService;\n    this.username = \"\";\n    this.password = \"\";\n    this.isOpen = false;\n  }\n  ngOnInit() {\n    this.loginService.isOpen$.subscribe(isOpen => {\n      this.isOpen = isOpen;\n    });\n  }\n  onSubmit() {\n    const payload = {\n      username: this.username,\n      password: this.password\n    };\n    this.http.post('/api/login', payload).subscribe(response => {\n      // Handle successful login response\n      console.log('Login successful', response);\n      // Perform any necessary actions, such as storing tokens or redirecting\n    }, error => {\n      // Handle login error\n      console.error('Login failed', error);\n      // Display an error message or perform any necessary actions\n    });\n    // After successful login, close the modal using:\n    this.loginService.closeModal();\n  }\n}\nLoginComponent.ɵfac = function LoginComponent_Factory(t) {\n  return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.LoginService));\n};\nLoginComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: LoginComponent,\n  selectors: [[\"app-login-form\"]],\n  decls: 14,\n  vars: 2,\n  consts: [[1, \"login-form\"], [3, \"ngSubmit\"], [1, \"form-group\"], [\"for\", \"username\"], [\"type\", \"text\", \"id\", \"username\", \"name\", \"username\", \"required\", \"\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"password\"], [\"type\", \"password\", \"id\", \"password\", \"name\", \"password\", \"required\", \"\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"submit\", 3, \"click\"]],\n  template: function LoginComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"h2\");\n      i0.ɵɵtext(2, \"Login\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"form\", 1);\n      i0.ɵɵlistener(\"ngSubmit\", function LoginComponent_Template_form_ngSubmit_3_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(4, \"div\", 2)(5, \"label\", 3);\n      i0.ɵɵtext(6, \"Reddit Username:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"input\", 4);\n      i0.ɵɵlistener(\"ngModelChange\", function LoginComponent_Template_input_ngModelChange_7_listener($event) {\n        return ctx.username = $event;\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(8, \"div\", 2)(9, \"label\", 5);\n      i0.ɵɵtext(10, \"Reddit Password:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(11, \"input\", 6);\n      i0.ɵɵlistener(\"ngModelChange\", function LoginComponent_Template_input_ngModelChange_11_listener($event) {\n        return ctx.password = $event;\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(12, \"button\", 7);\n      i0.ɵɵlistener(\"click\", function LoginComponent_Template_button_click_12_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵtext(13, \"Login\");\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"ngModel\", ctx.username);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngModel\", ctx.password);\n    }\n  },\n  dependencies: [i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.RequiredValidator, i2.NgModel, i2.NgForm],\n  styles: [\"html[_ngcontent-%COMP%] {\\r\\n    font-size: 56px;\\r\\n  }\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvbG9naW4vbG9naW4uY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLGVBQWU7RUFDakIiLCJzb3VyY2VzQ29udGVudCI6WyJodG1sIHtcclxuICAgIGZvbnQtc2l6ZTogNTZweDtcclxuICB9Il0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":";;;AAQA,OAAM,MAAOA,cAAc;EACvBC,YAAoBC,YAA0B;IAA1B,iBAAY,GAAZA,YAAY;IAChC,aAAQ,GAAG,EAAE;IACb,aAAQ,GAAG,EAAE;IACb,WAAM,GAAY,KAAK;EAH0B;EAKjDC,QAAQ;IAEJ,IAAI,CAACD,YAAY,CAACE,OAAO,CAACC,SAAS,CAACC,MAAM,IAAG;MACzC,IAAI,CAACA,MAAM,GAAGA,MAAM;IACxB,CAAC,CAAC;EACN;EAEAC,QAAQ;IAEJ,MAAMC,OAAO,GACb;MACAC,QAAQ,EAAE,IAAI,CAACA,QAAQ;MACvBC,QAAQ,EAAE,IAAI,CAACA;KACd;IAED,IAAI,CAACC,IAAI,CAACC,IAAI,CAAC,YAAY,EAAEJ,OAAO,CAAC,CACpCH,SAAS,CACPQ,QAAQ,IAAI;MACX;MACAC,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEF,QAAQ,CAAC;MACzC;IACF,CAAC,EACAG,KAAK,IAAI;MACR;MACAF,OAAO,CAACE,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;MACpC;IACF,CAAC,CACF;IAED;IACA,IAAI,CAACd,YAAY,CAACe,UAAU,EAAE;EAClC;;AArCSjB,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;QAAdA,cAAc;EAAAkB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCR3BC,8BAAwB;MAClBA,qBAAK;MAAAA,iBAAK;MACdA,+BAA8B;MAAxBA;QAAA,OAAYC,cAAU;MAAA,EAAC;MAC3BD,8BAAwB;MACAA,gCAAgB;MAAAA,iBAAQ;MAC9CA,gCAAiF;MAAhCA;QAAA;MAAA,EAAsB;MAAvEA,iBAAiF;MAEnFA,8BAAwB;MACAA,iCAAgB;MAAAA,iBAAQ;MAC9CA,iCAAqF;MAAhCA;QAAA;MAAA,EAAsB;MAA3EA,iBAAqF;MAEvFA,kCAA2C;MAAnCA;QAAA,OAASC,cAAU;MAAA,EAAC;MAAeD,sBAAK;MAAAA,iBAAS;;;MANNA,eAAsB;MAAtBA,sCAAsB;MAIlBA,eAAsB;MAAtBA,sCAAsB","names":["LoginComponent","constructor","loginService","ngOnInit","isOpen$","subscribe","isOpen","onSubmit","payload","username","password","http","post","response","console","log","error","closeModal","selectors","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["E:\\CodeProjects\\net\\SavedRedditBuckets\\SavedRedditBuckets\\ClientApp\\src\\app\\login\\login.component.ts","E:\\CodeProjects\\net\\SavedRedditBuckets\\SavedRedditBuckets\\ClientApp\\src\\app\\login\\login.component.html"],"sourcesContent":["import { Component } from '@angular/core';\r\nimport { LoginService } from './login.service';\r\n\r\n@Component({\r\n  selector: 'app-login-form',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.css']\r\n})\r\nexport class LoginComponent {\r\n    constructor(private loginService: LoginService) {}\r\n    username = \"\";\r\n    password = \"\";\r\n    isOpen: boolean = false;\r\n\r\n    ngOnInit() \r\n    {\r\n        this.loginService.isOpen$.subscribe(isOpen => {\r\n            this.isOpen = isOpen;\r\n        });\r\n    }\r\n\r\n    onSubmit() \r\n    {\r\n        const payload = \r\n        {\r\n        username: this.username,\r\n        password: this.password\r\n        };\r\n\r\n        this.http.post('/api/login', payload)\r\n        .subscribe(\r\n          (response) => {\r\n            // Handle successful login response\r\n            console.log('Login successful', response);\r\n            // Perform any necessary actions, such as storing tokens or redirecting\r\n          },\r\n          (error) => {\r\n            // Handle login error\r\n            console.error('Login failed', error);\r\n            // Display an error message or perform any necessary actions\r\n          }\r\n        );\r\n\r\n        // After successful login, close the modal using:\r\n        this.loginService.closeModal();\r\n    }\r\n}","<div class=\"login-form\">\r\n  <h2>Login</h2>\r\n  <form (ngSubmit)=\"onSubmit()\">\r\n    <div class=\"form-group\">\r\n      <label for=\"username\">Reddit Username:</label>\r\n      <input type=\"text\" id=\"username\" name=\"username\" [(ngModel)]=\"username\" required>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label for=\"password\">Reddit Password:</label>\r\n      <input type=\"password\" id=\"password\" name=\"password\" [(ngModel)]=\"password\" required>\r\n    </div>\r\n    <button (click)=\"onSubmit()\" type=\"submit\">Login</button>\r\n  </form>\r\n</div>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}