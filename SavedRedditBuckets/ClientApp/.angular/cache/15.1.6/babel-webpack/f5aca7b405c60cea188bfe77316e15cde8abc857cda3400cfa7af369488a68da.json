{"ast":null,"code":"import { __decorate, __param } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { catchError } from 'rxjs/operators';\nimport { throwError } from 'rxjs';\nlet LoginComponent = class LoginComponent {\n  constructor(loginService, http, baseUrl) {\n    this.loginService = loginService;\n    this.http = http;\n    this.username = \"\";\n    this.password = \"\";\n    this.isOpen = false;\n  }\n  ngOnInit() {\n    this.loginService.isOpen$.subscribe(isOpen => {\n      this.isOpen = isOpen;\n    });\n  }\n  onSubmit() {\n    const payload = {\n      username: this.username,\n      password: this.password\n    };\n    this.http.post('login', payload).pipe(catchError(error => {\n      // Handle login error\n      console.error('Login failed', error);\n      // Display an error message or perform any necessary actions\n      return throwError(() => new Error(error));\n    })).subscribe(response => {\n      // Handle successful login response\n      console.log('Login successful', response);\n      // Perform any necessary actions, such as storing tokens or redirecting\n    });\n  }\n};\n\nLoginComponent = __decorate([Component({\n  selector: 'app-login-form',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n}), __param(2, Inject('BASE_URL'))], LoginComponent);\nexport { LoginComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AAGzC,SAASC,UAAU,QAAQ,gBAAgB;AAC3C,SAASC,UAAU,QAAQ,MAAM;AAO1B,IAAMC,cAAc,GAApB,MAAMA,cAAc;EACvBC,YAAoBC,YAA0B,EAAUC,IAAgB,EAAsBC,OAAe;IAAzF,iBAAY,GAAZF,YAAY;IAAwB,SAAI,GAAJC,IAAI;IAC5D,aAAQ,GAAG,EAAE;IACb,aAAQ,GAAG,EAAE;IACb,WAAM,GAAY,KAAK;EAHyF;EAKhHE,QAAQ;IAEJ,IAAI,CAACH,YAAY,CAACI,OAAO,CAACC,SAAS,CAACC,MAAM,IAAG;MACzC,IAAI,CAACA,MAAM,GAAGA,MAAM;IACxB,CAAC,CAAC;EACN;EAEAC,QAAQ;IAEJ,MAAMC,OAAO,GACb;MACEC,QAAQ,EAAE,IAAI,CAACA,QAAQ;MACvBC,QAAQ,EAAE,IAAI,CAACA;KAChB;IAED,IAAI,CAACT,IAAI,CAACU,IAAI,CAAC,OAAO,EAAEH,OAAO,CAAC,CAC/BI,IAAI,CAEHhB,UAAU,CAAEiB,KAAK,IAAI;MAEnB;MACAC,OAAO,CAACD,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;MACpC;MACA,OAAOhB,UAAU,CAAC,MAAM,IAAIkB,KAAK,CAACF,KAAK,CAAC,CAAC;IAC3C,CAAC,CAAC,CACH,CACAR,SAAS,CAAEW,QAAQ,IAAI;MAEtB;MACAF,OAAO,CAACG,GAAG,CAAC,kBAAkB,EAAED,QAAQ,CAAC;MACzC;IACF,CAAC,CAAC;EACN;CACH;;AAvCYlB,cAAc,eAL1BH,SAAS,CAAC;EACTuB,QAAQ,EAAE,gBAAgB;EAC1BC,WAAW,EAAE,wBAAwB;EACrCC,SAAS,EAAE,CAAC,uBAAuB;CACpC,CAAC,EAE6EC,iBAAM,CAAC,UAAU,CAAC,IADpFvB,cAAc,CAuC1B;SAvCYA,cAAc","names":["Component","catchError","throwError","LoginComponent","constructor","loginService","http","baseUrl","ngOnInit","isOpen$","subscribe","isOpen","onSubmit","payload","username","password","post","pipe","error","console","Error","response","log","selector","templateUrl","styleUrls","__param"],"sourceRoot":"","sources":["E:\\CodeProjects\\net\\SavedRedditBuckets\\SavedRedditBuckets\\ClientApp\\src\\app\\login\\login.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\r\nimport { LoginService } from './login.service';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { catchError } from 'rxjs/operators';\r\nimport { throwError } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-login-form',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.css']\r\n})\r\nexport class LoginComponent {\r\n    constructor(private loginService: LoginService, private http: HttpClient, @Inject('BASE_URL') baseUrl: string) {}\r\n    username = \"\";\r\n    password = \"\";\r\n    isOpen: boolean = false;\r\n\r\n    ngOnInit() \r\n    {\r\n        this.loginService.isOpen$.subscribe(isOpen => {\r\n            this.isOpen = isOpen;\r\n        });\r\n    }\r\n\r\n    onSubmit() \r\n    {\r\n        const payload = \r\n        {\r\n          username: this.username,\r\n          password: this.password\r\n        };\r\n    \r\n        this.http.post('login', payload)\r\n        .pipe\r\n        (\r\n          catchError((error) => \r\n          {\r\n            // Handle login error\r\n            console.error('Login failed', error);\r\n            // Display an error message or perform any necessary actions\r\n            return throwError(() => new Error(error))\r\n          })\r\n        )\r\n        .subscribe((response) => \r\n        {\r\n          // Handle successful login response\r\n          console.log('Login successful', response);\r\n          // Perform any necessary actions, such as storing tokens or redirecting\r\n        });\r\n    }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}